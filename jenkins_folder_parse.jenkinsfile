pipeline {
    agent any

    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'BITBUCKET_PAYLOAD', value: '$'],
            ],
            causeString: 'Triggered by Bitbucket Push',
            token: 'bitbucket_dispatcher_token',  // must match Bitbucket webhook token
            printContributedVariables: true,
            printPostContent: true
        )
    }

    stages {
        stage('Parse Bitbucket Payload') {
            steps {
                script {
                    // Parse Bitbucket webhook JSON payload
                    def payload = readJSON text: BITBUCKET_PAYLOAD

                    // Collect all changed file paths
                    def changedFiles = []
                    payload.push.changes.each { change ->
                        change.commits.each { commit ->
                            commit.files.each { file ->
                                changedFiles << file.path
                            }
                        }
                    }

                    echo "Changed files: ${changedFiles}"

                    // Identify which module/folder changed
                    env.BUILD_APP1 = changedFiles.any { it.startsWith('app1/') } ? 'true' : 'false'
                    env.BUILD_APP2 = changedFiles.any { it.startsWith('app2/') } ? 'true' : 'false'
                }
            }
        }

stage('Enter dynamic model folder') {
    steps {
        script {
            // Find first folder inside tstream
            def subDir = bat(script: 'for /d %%i in ("tstream\\*") do @echo %%~nxi', returnStdout: true).trim()
            echo "Found subfolder: ${subDir}"

            // Use Jenkins dir() to switch context
            dir("tstream/${subDir}") {
                bat 'dir'
            }
        }
    }
}

stage('Workspace Sizes') {
            steps {
                powershell '''
                Get-ChildItem 'C:\\Jenkins\\Workspace' -Directory | 
                ForEach-Object {
                    $size = (Get-ChildItem $_.FullName -Recurse | Measure-Object -Property Length -Sum).Sum
                    Write-Output ("{0} : {1} MB" -f $_.Name, [math]::Round($size/1MB,2))
                }
                '''
            }
        }

Get-ChildItem 'C:\' -Directory | ForEach-Object {
    $size = (Get-ChildItem $_.FullName -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum
    [PSCustomObject]@{
        Folder = $_.FullName
        SizeGB = [math]::Round($size/1GB,2)
    }
} | Sort-Object SizeGB -Descending
        stage('Trigger Specific Builds') {
            steps {
                script {
                    if (env.BUILD_APP1 == 'true') {
                        echo "Changes detected in app1/, triggering App1 job..."
                        build job: 'App1-Build', wait: false
                    }

                    if (env.BUILD_APP2 == 'true') {
                        echo "Changes detected in app2/, triggering App2 job..."
                        build job: 'App2-Build', wait: false
                    }

                    if (env.BUILD_APP1 != 'true' && env.BUILD_APP2 != 'true') {
                        echo "No relevant folder changes detected. Skipping downstream builds."
                    }
                }
            }
        }
    }
}
